services:
  backend-golang:
    build:
      context: ./backend-golang
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    volumes:
      - ./backend-golang/cmd:/app/cmd:delegated
      - ./backend-golang/internal:/app/internal:delegated
      - ./backend-golang/pkg:/app/pkg:delegated
      - ./backend-golang/api:/app/api:delegated
      - ./backend-golang/configs:/app/configs:delegated
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/go/cache
      - /app/.git
    depends_on:
      - postgres
      - redis
      - rabbitmq
    environment:
      - GO_ENV=${GO_ENV:-development}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=sample_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - GOMODCACHE=/go/pkg/mod
      - GOCACHE=/go/cache
    command: >
      sh -c "until nc -z rabbitmq 5672; do echo [golang] waiting for rabbitmq; sleep 2; done;
        if [ \"$$GO_ENV\" = \"development\" ]; then
          [ -f /go/pkg/mod/cache/download/sumdb/sum.golang.org/latest ] || go mod download;
          go install -v cmd/serve/main.go && /go/bin/main;
        else
          /app/backend-golang;
        fi"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  backend-nodejs:
    build:
      context: ./backend-nodejs
      dockerfile: Dockerfile
      target: ${NODE_TARGET:-development}
    ports:
      - "3000:3000"
    volumes:
      - ./backend-nodejs/src:/app/src:delegated
      - ./backend-nodejs/test:/app/test:delegated
      - /app/node_modules
    depends_on:
      backend-golang:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - GOLANG_API_URL=http://backend-golang:8080
    command: >
      sh -c "until nc -z rabbitmq 5672; do echo [nodejs] waiting for rabbitmq; sleep 2; done;
        npm run dev"
    networks:
      - app-network

  frontend-react:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      target: ${NODE_TARGET:-development}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend-react/src:/app/src:delegated
      - ./frontend-react/public:/app/public:delegated
      - /app/node_modules
    depends_on:
      - backend-nodejs
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      # - VITE_API_URL=http://localhost:3000
    command: npm run dev -- --host 0.0.0.0
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sample_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sample_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    # restart: unless-stopped
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    # restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  go-mod-cache:
  go-build-cache: