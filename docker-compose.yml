services:
  backend-golang:
    build:
      context: ./backend-golang
      dockerfile: Dockerfile
      target: development
    ports:
      - "8080:8080"
    volumes:
      - ./backend-golang:/app
    depends_on:
      - postgres
      - redis
      - rabbitmq
    environment:
      - GO_ENV=${GO_ENV:-development}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=sample_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    command: >
      sh -c "if [ \"$$GO_ENV\" = \"development\" ]; then
        go run cmd/serve/main.go;
      else
        /app/backend-golang;
      fi"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  backend-nodejs:
    build:
      context: ./backend-nodejs
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./backend-nodejs:/app
      - ./backend-nodejs/node_modules:/app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - GOLANG_API_URL=http://backend-golang:8080
    depends_on:
      backend-golang:
        condition: service_healthy
    command: npm run dev
    networks:
      - app-network

  frontend-react:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      target: development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend-react:/app
      # Comment out node_modules volume mount untuk menghindari konflik
      # - ./frontend-react/node_modules:/app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - backend-nodejs
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sample_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 