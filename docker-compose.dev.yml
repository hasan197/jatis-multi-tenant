services:
  backend-golang:
    build:
      context: ./backend-golang
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./backend-golang/cmd:/app/cmd:delegated
      - ./backend-golang/internal:/app/internal:delegated
      - ./backend-golang/pkg:/app/pkg:delegated
      - ./backend-golang/api:/app/api:delegated
      - ./backend-golang/configs:/app/configs:delegated
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/go/cache
      - /app/.git
    depends_on:
      - postgres
      - redis
      - rabbitmq
    environment:
      - GO_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=sample_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - GOMODCACHE=/go/pkg/mod
      - GOCACHE=/go/cache
    command: >
      sh -c "until nc -z rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
        if [ \"$$GO_ENV\" = \"development\" ]; then
          [ -f /go/pkg/mod/cache/download/sumdb/sum.golang.org/latest ] || go mod download;
          go install -v cmd/serve/main.go && /go/bin/main;
        else
          /app/backend-golang;
        fi"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app-network
  frontend-react:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
      target: development
    ports:
      - "5173:5173"
    volumes:
      - ./frontend-react:/app
    environment:
      - NODE_ENV=development
    command: npm run dev -- --host 0.0.0.0
    depends_on:
      - backend-nodejs
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  go-mod-cache:
  go-build-cache:  